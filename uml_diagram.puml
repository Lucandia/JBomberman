@startuml esame

skinparam linetype polyline
skinparam linetype ortho

class com.esame.AudioUtils {
	{field} {static} -clips : java.util.Map
	{field} {static} -playingClips : java.util.Set
	{method}  {static} +playSoundEffect ( audioFileName : String ) : void
	{method}  {static} +preloadAll () : void
	{method}  {static} +preloadSoundEffect ( audioFileName : String ) : void
	{method}  {static} +stopAll () : void
}


class com.esame.BackgroundMusic {
	{field} -mediaPlayer : javafx.scene.media.MediaPlayer
	{method} +playMusic ( audioFileName : String ) : void
	{method} +stopMusic () : void
}


class com.esame.BombController {
	{field} -bombRadius : javafx.beans.property.IntegerProperty
	{field} -currentX : javafx.beans.property.IntegerProperty
	{field} -currentY : javafx.beans.property.IntegerProperty
	{field} -maxBombs : javafx.beans.property.IntegerProperty
	{field} -pane : javafx.scene.layout.Pane
	{method} +DetonateBomb ( bomb : com.esame.BombModel ) : void
	{method} +destroyLimit ( bomb : com.esame.BombModel , x : int , y : int ) : boolean
	{method} +input () : void
	{method} +updateState ( elapsed : double ) : void
}


class com.esame.BombModel {
	{field} -active : javafx.beans.property.BooleanProperty
	{field} -blastRadius : int
	{field} -detonatePositions : java.util.List
	{field} -timer : double
	{field} -totalTime : double
	{field} -walkableTime : double
	{method} +activeProperty () : javafx.beans.property.BooleanProperty
	{method} +addDetonatePosition ( x : int , y : int ) : void
	{method} +addListener ( observer : javafx.beans.InvalidationListener ) : void
	{method} +containsDetonatePosition ( x : int , y : int ) : boolean
	{method} +explode () : void
	{method} +isDetonable () : boolean
	{method} +notifyListeners () : void
	{method} +removeListener ( observer : javafx.beans.InvalidationListener ) : void
	{method} +updateState ( elapsed : double ) : void
}


interface com.esame.BombObserver {
	{method}  {abstract} +update ( bombModel : com.esame.BombModel ) : void
}


class com.esame.BombView {
	{field} -activated : boolean
	{field} -bombAnimation : javafx.animation.Timeline
	{field} -bombSprite : javafx.scene.image.ImageView
	{field} -pane : javafx.scene.layout.Pane
	{field} -size : int
	{method} +addToPane () : void
	{method} +invalidated ( observable : javafx.beans.Observable ) : void
	{method} +playExplosionAnimation ( model : com.esame.BombModel ) : void
	{method} +startBombAnimation ( bomb : com.esame.BombModel ) : void
	{method} +update ( model : com.esame.BombModel ) : void
}


class com.esame.EmptyTile {
	{method} +isDetonable () : boolean
	{method} +isOccupied () : boolean
}


class com.esame.EnemiesController {
	{method} +addEnemy ( enemy : com.esame.EnemyModel ) : void
	{method} +removeEnemy ( enemy : com.esame.EnemyModel ) : void
	{method} +updateState ( elapsed : double ) : void
}


abstract class com.esame.EnemyModel {
	{method} +checkCollision ( dx : int , dy : int ) : com.esame.EntityModel
	{method}  {abstract} +movingBehaviour () : void
	{method} +updateState ( elapsedTime : double ) : void
}


class com.esame.EnemyModel1 {
	{method} +movingBehaviour () : void
}


class com.esame.EnemyModel2 {
	{method} +loseLife ( amount : int ) : void
	{method} +movingBehaviour () : void
}


abstract class com.esame.EntityModel {
	{field} #observers : java.util.List
	{field} #boundingBox : int[2]
	{field} #boundingOffset : int[2]
	{field} #centerX : javafx.beans.property.IntegerProperty
	{field} #centerY : javafx.beans.property.IntegerProperty
	{field} #delayMove : double
	{field} #isMoving : boolean
	{field} #lastDirection : int[2]
	{field} #life : javafx.beans.property.IntegerProperty
	{field} #timeSinceLastMove : double
	{field} #velocity : javafx.beans.property.DoubleProperty
	{field} #stage : com.esame.StageModel
	{field} #occupiedTiles : java.util.List
	{method} +addListener ( listener : javafx.beans.InvalidationListener ) : void
	{method} #canMoveTo ( dx : int , dy : int ) : boolean
	{method} +centerOfMass () : int[2]
	{method} +centerXProperty () : javafx.beans.property.SimpleIntegerProperty
	{method} +centerYProperty () : javafx.beans.property.SimpleIntegerProperty
	{method} +checkCollision ( dx : int , dy : int ) : com.esame.EntityModel
	{method} +clearOccupiedTiles () : void
	{method} +getLastDirectionString () : String
	{method} +isDead () : boolean
	{method} +isMoving () : boolean
	{method} +loseLife ( amount : int ) : void
	{method} +move ( dx : int , dy : int ) : void
	{method} #notifyListeners () : void
	{method} +removeListener ( listener : javafx.beans.InvalidationListener ) : void
	{method} +startMoving ( direction : String ) : void
	{method} +startMoving ( direction : int[2] ) : void
	{method} +startMoving ( dx : int , dy : int ) : void
	{method} +stopMoving () : void
	{method} +updateState ( elapsedTime : double ) : void
	{method} +velocityProperty () : javafx.beans.property.DoubleProperty
}


interface com.esame.EntityStateObserver {
	{method}  {abstract} +update ( entityModel : com.esame.EntityModel ) : void
}


class com.esame.EntityView {
	{field} -EntitySprite : javafx.scene.image.ImageView
	{field} -autoReverse : boolean
	{field} -directionSprite : java.util.Map
	{field} -frames : int
	{field} -lastDirection : String
	{field} -row : int
	{field} -walkAnimation : javafx.animation.Timeline
	{method} +invalidated ( observable : javafx.beans.Observable ) : void
	{method} +startWalking ( direction : String , velocity : double ) : void
	{method} +stopWalking () : void
	{method} +update ( model : com.esame.EntityModel ) : void
}


class com.esame.GameApp {
	{field} -numberOfEnemies : int
	{field} -timer : javafx.beans.property.IntegerProperty
	{method} +initializeGame ( data : com.esame.PlayerData , numberOfEnemies : int ) : Void
	{method} -setupGame ( primaryStage : javafx.stage.Stage , level : int ) : void
	{method} +start ( primaryStage : javafx.stage.Stage ) : void
}


class com.esame.HUDView {
	{field} -hudPane : javafx.scene.layout.HBox
	{field} -livesLabel : javafx.scene.control.Label
	{field} -scoreLabel : javafx.scene.control.Label
	{field} -timerLabel : javafx.scene.control.Label
	{method} +invalidated ( observable : javafx.beans.Observable ) : void
	{method} +update ( playerEntityModel : com.esame.EntityModel ) : void
}


class com.esame.InputController {
	{field} -keysPressed : java.util.Set
	{field} -scene : javafx.scene.Scene
	{method} -attachEventListeners () : void
	{method} -pressedController () : void
	{method} +releaseController () : void
}


class com.esame.JBomberMan {
	{method}  {static} +main ( args : [Ljava.lang.String; ) : void
}


class com.esame.MainMenu {
	{field} -avatarPreview : javafx.scene.image.ImageView
	{field} -statsLabel1 : javafx.scene.control.Label
	{field} -statsLabel2 : javafx.scene.control.Label
	{method}  {static} +launchMainMenu ( args : [Ljava.lang.String; ) : void
	{method} +show ( stage : javafx.stage.Stage ) : void
	{method} +start ( primaryStage : javafx.stage.Stage ) : void
	{method} -updateAvatarPreview ( avatarNumber : String ) : void
}


class com.esame.PlayerController {
	{method} +input ( directionString : String ) : void
	{method} +updateState ( elapsed : double ) : void
}


class com.esame.PlayerData {
	{field} -avatar : String
	{field} -lastLevel : String
	{field} -lostGames : String
	{field} -nickname : String
	{field} -playedGames : String
	{field} -score : String
	{field} -winGames : String
	{method} +getDataString () : String
	{method} +getLastLevelInt () : int
	{method} +getLostGamesInt () : int
	{method} +getPlayedGamesInt () : int
	{method} +getWinGamesInt () : int
	{method}  {static} +readPlayerData () : java.util.Map
	{method} +savePlayerData () : void
}


class com.esame.PlayerModel {
	{field} -bombCapacity : javafx.beans.property.IntegerProperty
	{field} -bombRadius : javafx.beans.property.IntegerProperty
	{field} -justGainedPowerUp : boolean
	{field} -justLostLife : boolean
	{field} -recovering : boolean
	{field} -recoveryTime : int
	{field} -score : javafx.beans.property.IntegerProperty
	{method} +addScore ( points : int ) : void
	{method} +bombCapacityProperty () : javafx.beans.property.IntegerProperty
	{method} +bombRadiusProperty () : javafx.beans.property.IntegerProperty
	{method} +checkCollision ( dx : int , dy : int ) : com.esame.EntityModel
	{method} +increaseBombCapacity () : void
	{method} +increaseBombRadius () : void
	{method} +increaseSpeed () : void
	{method} +isOnNextLevelDoor () : boolean
	{method} +justGainedPowerUp () : boolean
	{method} +justLostLife () : boolean
	{method} +lifeProperty () : javafx.beans.property.IntegerProperty
	{method} +loseLife () : void
	{method} +loseLife ( amount : int ) : void
	{method} +scoreProperty () : javafx.beans.property.IntegerProperty
	{method} +updateState ( elapsedTime : double ) : void
}


class com.esame.PlayerSound {
	{field} -audioDelay : int
	{method} +invalidated ( observable : javafx.beans.Observable ) : void
	{method} +update ( playerEntityModel : com.esame.EntityModel ) : void
}


class com.esame.PowerUp {
	{field} -applied : boolean
	{method} +applyPowerUp ( playerModel : com.esame.PlayerModel ) : void
	{method} +isDetonable () : boolean
	{method} +setOccupant ( occupant : com.esame.EntityModel ) : void
}


interface com.esame.PowerUpBehaviour {
	{method}  {abstract} +applyPowerUp ( playerModel : com.esame.PlayerModel ) : void
}


class com.esame.PowerUpBlast {
	{method} +applyPowerUp ( playerModel : com.esame.PlayerModel ) : void
}


class com.esame.PowerUpBomb {
	{method} +applyPowerUp ( playerModel : com.esame.PlayerModel ) : void
}


class com.esame.PowerUpSpeed {
	{method} +applyPowerUp ( playerModel : com.esame.PlayerModel ) : void
}


class com.esame.SpecialTile {
	{field} +type : com.esame.SpecialTileType
	{method} +getType () : com.esame.SpecialTileType
	{method} +setType ( type : com.esame.SpecialTileType ) : void
}

enum com.esame.SpecialTileType {
	{field} +type : pupBlast
	{field} +type : pupBomb
	{field} +type : pupSpeed
	{method} +getRandomPowerUpType () : void
}


class com.esame.StageModel {
	{field} -damage : int
	{field} -destructedTiles : int
	{field} -destructibleTilesStart : int
	{field} -freeSlots : int
	{field} -freeTileIndex : java.util.List
	{field} -height : int
	{field} -powerUpProbability : double
	{field} -rand : java.util.Random
	{field} -tileSize : int
	{field} -tiles : com.esame.Tile[[]];
	{field} -width : int
	{method} +addBombAtPosition ( x : int , y : int , bombRadius : int ) : boolean
	{method} +addListener ( listener : javafx.beans.InvalidationListener ) : void
	{method} +canExplodeAtPosition ( x : int , y : int ) : boolean
	{method} +destroyTile ( x : int , y : int ) : boolean
	{method} +destroyTileAtPosition ( x : int , y : int ) : boolean
	{method} +getBombAtPosition ( x : int , y : int ) : com.esame.BombModel
	{method} +getEmptyTile ( x : int , y : int ) : com.esame.EmptyTile
	{method} +getEmptyTileAtPosition ( x : int , y : int ) : com.esame.EmptyTile
	{method} +getRandomFreeTile () : int[2]
	{method} +getTile ( x : int , y : int ) : com.esame.Tile
	{method} +getTileAtPosition ( x : int , y : int ) : com.esame.Tile
	{method} +getTileStartCoordinates ( x : int , y : int ) : int[2]
	{method} +isBorder ( x : int , y : int ) : boolean
	{method} +notifyListeners () : void
	{method} +removeListener ( listener : javafx.beans.InvalidationListener ) : void
	{method} +setTile ( x : int , y : int , tile : com.esame.Tile ) : void
	{method} +setTileAtPosition ( x : int , y : int , tile : com.esame.Tile ) : void
}


interface com.esame.StageObserver {
	{method}  {abstract} +update ( stageModel : com.esame.StageModel ) : void
}


class com.esame.StageView {
	{field} -combinedView : javafx.scene.image.ImageView
	{field} -pane : javafx.scene.layout.Pane
	{field} -stageImage : javafx.scene.image.Image
	{field} -tilesImage : javafx.scene.image.Image
	{method} +invalidated ( observable : javafx.beans.Observable ) : void
	{method} +update ( stage : com.esame.StageModel ) : void
}


class com.esame.Tile {
	{field} #isDestructible : boolean
	{field} #isDisplayable : boolean
	{field} #isWalkable : boolean
	{method} +isDestructible () : boolean
	{method} +isDetonable () : boolean
	{method} +isDisplayable () : boolean
	{method} +isWalkable () : boolean
	{method} +setDisplayable ( displayable : boolean ) : void
	{method} +setWalkable ( walkable : boolean ) : void
}


abstract class com.esame.XYModel {
	{field} #x : javafx.beans.property.IntegerProperty
	{field} #y : javafx.beans.property.IntegerProperty
	{method} +setPosition ( x : int , y : int ) : void
	{method} +xProperty () : javafx.beans.property.IntegerProperty
	{method} +yProperty () : javafx.beans.property.IntegerProperty
}




com.esame.JBomberMan -->  com.esame.MainMenu : launchMainMenu

com.esame.BombController "1" o-- "0..*"  com.esame.BombModel : bombList
com.esame.BombController -->  com.esame.StageModel : stage
com.esame.BombModel "1" o-- "0..*"  com.esame.BombView : observers
com.esame.BombModel --|>  com.esame.EmptyTile
com.esame.BombView ..|>  com.esame.BombObserver
com.esame.EmptyTile -->  com.esame.EntityModel : occupant
com.esame.EmptyTile --|>  com.esame.Tile
com.esame.EnemiesController "1" o-- "0..*"  com.esame.EnemyModel : enemies
com.esame.EnemyModel --|>  com.esame.EntityModel
com.esame.EnemyModel1 --|>  com.esame.EnemyModel
com.esame.EnemyModel2 --|>  com.esame.EnemyModel
com.esame.EntityModel "1" o-- "0..*"  com.esame.EmptyTile : occupiedTiles
com.esame.EntityModel "1" o-- "0..*"  com.esame.EntityStateObserver : observers
com.esame.EntityModel -->  com.esame.StageModel : stage
com.esame.EntityModel --|>  com.esame.XYModel
com.esame.EntityView ..|>  com.esame.EntityStateObserver
com.esame.GameApp -->  com.esame.AudioUtils : playSoundEffect
com.esame.GameApp -->  com.esame.BackgroundMusic : backgroundMusic
com.esame.GameApp -->  com.esame.BombController : bombController
com.esame.GameApp -->  com.esame.EnemiesController : enemiesController
com.esame.GameApp -->  com.esame.PlayerController : playerController
com.esame.GameApp -->  com.esame.PlayerData : data
com.esame.GameApp -->  com.esame.PlayerModel : playerModel
com.esame.GameApp -->  com.esame.StageModel : stageModel
com.esame.GameApp -->  com.esame.HUDView : timer
com.esame.HUDView ..|>  com.esame.EntityStateObserver
com.esame.InputController -->  com.esame.BombController : bomb
com.esame.InputController -->  com.esame.PlayerController : player
com.esame.MainMenu "1" o-- "0..*"  com.esame.PlayerData : playerDataMap
com.esame.MainMenu -->  com.esame.GameApp  : start
com.esame.PlayerController -->  com.esame.EntityView : view
com.esame.PlayerController -->  com.esame.PlayerModel : model
com.esame.PlayerController -->  com.esame.PlayerSound : audio
com.esame.PlayerModel --|>  com.esame.EntityModel
com.esame.PlayerSound ..|>  com.esame.EntityStateObserver
com.esame.PlayerSound -->  com.esame.AudioUtils : playSoundEffect
com.esame.PowerUp -->  com.esame.PowerUpBehaviour : behaviour
com.esame.PowerUp --|>  com.esame.SpecialTile
com.esame.PowerUpBlast ..|>  com.esame.PowerUpBehaviour
com.esame.PowerUpBomb ..|>  com.esame.PowerUpBehaviour
com.esame.PowerUpSpeed ..|>  com.esame.PowerUpBehaviour
com.esame.SpecialTile --|>  com.esame.EmptyTile
com.esame.SpecialTile -->  com.esame.SpecialTileType : type
com.esame.StageModel "1" o-- "0..*"  com.esame.StageObserver : observers
com.esame.StageModel "1" o-- "0..*"  com.esame.Tile : tiles
com.esame.StageModel -->  com.esame.PlayerModel : player
com.esame.StageModel -->  com.esame.SpecialTile : nextLevelDoor
com.esame.StageModel --> com.esame.SpecialTileType : getRandomPowerUpType
com.esame.StageView ..|>  com.esame.StageObserver
com.esame.Tile --|>  com.esame.XYModel

@enduml